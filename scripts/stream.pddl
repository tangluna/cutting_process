(define (stream panda-tamp)
  (:stream sample-pose
    :inputs (?o ?r)
    :domain (Stackable ?o ?r)
    :outputs (?p)
    :certified (and (Pose ?o ?p) (Supported ?o ?p ?r))
  )
  (:stream sample-grasp
    :inputs (?a ?o)
    :domain (and (Arm ?a) (Graspable ?o))
    :outputs (?g)
    :certified (Grasp ?a ?o ?g)
  )
    
  (:stream generate-sliced-objects ; todo -- sanity check preconditions and effects
    :inputs (?o ?a ?p ?knife)
    :domain (and (Cuttable ?o) (EarliestAncestor ?a ?o) (Pose ?o ?p) (Knife ?knife)) ; should this have an InWorld?
    :outputs (?h1 ?h2 ?p1 ?p2 ?wd1 ?wa1 ?wd2 ?wa2 ?t)
    :certified (and (SlicedFrom ?o ?h1) (Cuttable ?h1)
                    (SlicedFrom ?o ?h2) (Cuttable ?h2)
                    (ValidSliceEffect ?o ?p ?h1 ?h2 ?t)
                    (EarliestAncestor ?a ?h1)
                    (EarliestAncestor ?a ?h2)
                    (Pose ?h1 ?p1)
                    (Pose ?h2 ?p2)
                    (Wrench ?wd1) (Wrench ?wa1) (Wrench ?wd2) (Wrench ?wa2)
                    (SliceCutWrenches ?knife ?h1 ?wd1 ?wa1)
                    (SliceCutWrenches ?knife ?h2 ?wd2 ?wa2)
                    (Knife ?knife))
  )
  (:stream generate-diced-object ; todo -- sanity check preconditions and effects
    :inputs (?o)
    :domain (and (Cuttable ?o)) ; should this have an InWorld?
    :outputs (?l ?t)
    :certified (and (Pile ?l)
                    (DicedFrom ?o ?l)
                    (ValidDiceEffect ?l ?t))
  )
  (:stream inverse-kinematics
    :inputs (?a ?o ?p ?g)
    :domain (and (Arm ?a) (Pose ?o ?p) (Grasp ?a ?o ?g))
    :outputs (?q ?t)
    :certified (and (Conf ?q) (Traj ?t) (Kin ?a ?o ?p ?g ?q ?t))
  )
  (:stream plan-free-motion
    :inputs (?a ?q1 ?q2)
    :domain (and (Arm ?a) (Conf ?q1) (Conf ?q2))
    :outputs (?t)
    :certified (and (FreeMotion ?a ?q1 ?t ?q2) (Traj ?t))
  )
  (:stream plan-holding-motion
    :inputs (?a ?q1 ?q2 ?o ?g)
    :domain (and (Arm ?a) (Conf ?q1) (Conf ?q2) (Grasp ?a ?o ?g))
    :outputs (?t)
    :certified (and (HoldingMotion ?a ?q1 ?t ?q2 ?o ?g) (Traj ?t))
  )
  (:stream sample-force-grasp
    :inputs (?a ?o ?w)
    :domain (and (Arm ?a) (Graspable ?o) (Wrench ?w))
    :outputs (?g)
    :certified (and (Grasp ?a ?o ?g) (IsStableGrasp ?o ?g ?w))
  )
  (:stream plan-slice-cut-motion
    :inputs (?a ?knife ?o ?g ?p ?w1 ?w2)
    :domain (and (Arm ?a) (Knife ?knife) (Cuttable ?o) (Grasp ?a ?knife ?g) (Pose ?o ?p) (Wrench ?w1) (Wrench ?w2))
    :outputs (?q0 ?q1 ?t)
    :certified (and (SliceCutKin ?a ?knife ?o ?g ?p ?w1 ?w2 ?q0 ?q1 ?t) (Conf ?q0) (Conf ?q1) (Traj ?t))
  )
  (:stream plan-dice-cut-motion
    :inputs (?a ?knife ?o ?g ?p ?w)
    :domain (and (Arm ?a) (Knife ?knife) (Cuttable ?o) (Grasp ?a ?knife ?g) (Pose ?o ?p) (Wrench ?w))
    :outputs (?q0 ?q1 ?t)
    :certified (and (DiceCutKin ?a ?knife ?o ?g ?p ?w ?q0 ?q1 ?t) (Conf ?q0) (Conf ?q1) (Traj ?t))
  )
  ;todo -- (:stream plan-knife-push-motion
  ;:inputs (?a ?knife ?o ?g ?p1 ?p2 ?q1 ?q2 ?t)
  ;:outputs (?)
  ;)
  (:stream test-pose-cfree
    :inputs (?o1 ?p1 ?o2 ?p2)
    :domain (and (Pose ?o1 ?p1) (Pose ?o2 ?p2))
    :certified (ObjCFreePose ?o1 ?p1 ?o2 ?p2)
  )
  (:stream test-traj-cfree
    :inputs (?a ?t ?o ?p)
    :domain (and (Arm ?a) (Traj ?t) (Pose ?o ?p))
    :certified (ObjCFreeTraj ?a ?t ?o ?p)
  )
  (:stream test-grasp-stable
    :inputs (?a ?o ?w ?g)
    :domain (and (Arm ?a) (Graspable ?o) (Wrench ?w) (Grasp ?a ?o ?g))
    :certified (and (IsStableGrasp ?o ?g ?w))
  )
)
