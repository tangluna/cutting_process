(define (domain cutting-process)
  (:requirements :strips :equality)
  (:predicates
    (Arm ?a)
    (Movable ?o)
    (Conf ?q)
    (Pose ?o ?p)
    (Grasp ?a ?o ?g)
    (Traj ?t)
    (Region ?r)

    (Graspable ?o)
    (From ?o ?o)
    (InWorld ?o)
    (NeedSlice ?o)
    (CutFrom ?o ?p ?h1)

    (On ?o ?r)
    (Holding ?a ?o)
    (Stackable ?o ?r)
    (Supported ?o ?p ?r)

    (Kin ?a ?o ?p ?g ?q ?t)
    (FreeMotion ?a ?q1 ?t ?q2)
    (HoldingMotion ?a ?q1 ?t ?q2 ?o ?g)
    (UnsafePoseObj ?o ?p)
    (ObjCFreePose ?o ?p ?o2 ?p2)
    (UnsafeTrajObj ?r ?t)
    (ObjCFreeTraj ?r ?t ?o ?p)

    (CanMove)
    (HandEmpty ?a)
    (AtConf ?a ?q)
    (AtPose ?o ?p)
    (AtGrasp ?a ?o ?g)

    (Wrench ?w)
    (IsStableGrasp ?o ?g ?w)
    (StableHolding ?o ?w)

    (Knife ?knife)
    (Cuttable ?o)
    (Sliced ?o)
    (SliceCutWrenches ?knife ?o ?w1 ?w2)
    (SliceCutKin ?a ?knife ?o ?g ?p0 ?w1 ?w2 ?q0 ?q1 ?t)
  )

  (:action move_free
    :parameters (?a ?q1 ?q2 ?t)
    :precondition (and (Arm ?a) (HandEmpty ?a) (CanMove) ; disables moving twice in a row (b/c can smash both moves together) think optimization
                       (Conf ?q1) (AtConf ?a ?q1)
                       (not (UnsafeTrajObj ?a ?t))
                       (FreeMotion ?a ?q1 ?t ?q2))
    :effect (and (AtConf ?a ?q2) 
                 (not (AtConf ?a ?q1)) 
                 (not (CanMove)))
  )
  (:action move_holding
    :parameters (?a ?q1 ?q2 ?o ?g ?t)
    :precondition (and (Arm ?a) (CanMove)
                       (Movable ?o)
                       (Conf ?q1) (AtConf ?a ?q1)
                       (Grasp ?a ?o ?g) (AtGrasp ?a ?o ?g)
                       (not (UnsafeTrajObj ?a ?t))
                       (HoldingMotion ?a ?q1 ?t ?q2 ?o ?g))
    :effect (and (AtConf ?a ?q2) 
                 (not (AtConf ?a ?q1)) 
                 (not (CanMove)))
  )
  (:action pick
    :parameters (?a ?o ?p ?g ?q ?t)
    :precondition (and (Arm ?a) (HandEmpty ?a)
                       (Movable ?o)
                       (Conf ?q) (AtConf ?a ?q)
                       (Pose ?o ?p) (AtPose ?o ?p)
                       (Kin ?a ?o ?p ?g ?q ?t))
    :effect (and (AtGrasp ?a ?o ?g) 
                 (not (AtPose ?o ?p)) 
                 (not (HandEmpty ?a))
                 (CanMove))
  )
  (:action place
    :parameters (?a ?o ?p ?g ?q ?t)
    :precondition (and (Arm ?a)
                       (Movable ?o)
                       (Conf ?q) (AtConf ?a ?q)
                       (Grasp ?a ?o ?g) (AtGrasp ?a ?o ?g)
                       (not (UnsafePoseObj ?o ?p))
                       (Kin ?a ?o ?p ?g ?q ?t))
    :effect (and (not (AtGrasp ?a ?o ?g))
                 (AtPose ?o ?p)
                 (HandEmpty ?a)
                 (CanMove))
  )
  (:action slice_move
    :parameters (?a ?knife ?o ?g ?p ?w1 ?w2 ?q0 ?q1 ?t)
    :precondition (and (Arm ?a) 
                      (Knife ?knife) 
                      (Cuttable ?o)
                      (InWorld ?o)
                      (Conf ?q0) (AtConf ?a ?q0)
                      (Grasp ?a ?knife ?g) (AtGrasp ?a ?knife ?g) ; error comes here!
                      (StableHolding ?knife ?w1) (StableHolding ?knife ?w2)
                      (Pose ?o ?p) (AtPose ?o ?p)
                      (SliceCutWrenches ?knife ?o ?w1 ?w2)
                      (SliceCutKin ?a ?knife ?o ?g ?p ?w1 ?w2 ?q0 ?q1 ?t)
    )
    :effect (and (not (AtConf ?a ?q0)) 
                (AtConf ?a ?q1)
                 (NeedSlice ?o)
    )
  )
  (:action slice_object
    :parameters (?o ?p ?h1) ; ?oh2
    :precondition (and (Cuttable ?o) ;(InWorld ?o) 
                       (Pose ?o ?p) (AtPose ?o ?p)
                       (NeedSlice ?o)
                       (CutFrom ?o ?p ?h1)
                       )
    :effect (and (Sliced ?o)
                 (CanMove)
           )
  )
  (:derived (On ?o ?r)
    (exists (?p) (and (Supported ?o ?p ?r) (AtPose ?o ?p)))
  )
  (:derived (Holding ?a ?o)
    (exists (?g) (and (Arm ?a) (Grasp ?a ?o ?g) (AtGrasp ?a ?o ?g)))
  )
  (:derived (StableHolding ?o ?w)
    (exists (?a ?g) (and (Arm ?a) (Grasp ?a ?o ?g) (AtGrasp ?a ?o ?g) (IsStableGrasp ?o ?g ?w)))
  )
  (:derived (UnsafePoseObj ?o ?p)
    (exists (?o2 ?p2) (and (Pose ?bo ?p2) (AtPose ?o2 ?p2) 
                           (not (ObjCFreePose ?o ?p ?o2 ?p2)))))
  (:derived (UnsafeTrajObj ?r ?t)
      (exists (?o ?p) (and (Pose ?o ?p) (AtPose ?o ?p) 
                           (not (Holding ?r ?o))
                           (not (ObjCFreeTraj ?r ?t ?o ?p)))))
)
