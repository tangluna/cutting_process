(define (domain cutting-process)
  (:requirements :strips :equality)
  (:predicates
    ; robot existence predicates
    (Arm ?a)
    (Movable ?o)
    (Conf ?q)
    (Pose ?o ?p)
    (Grasp ?a ?o ?g)
    (Traj ?t)
    (Region ?r)

    ; locational predicates
    (Graspable ?o)
    (On ?o ?r)
    (Holding ?a ?o)
    (Stackable ?o ?r)
    (Supported ?o ?p ?r)

    ; movement predicates
    (Kin ?a ?o ?p ?g ?q ?t)
    (FreeMotion ?a ?q1 ?t ?q2)
    (HoldingMotion ?a ?q1 ?t ?q2 ?o ?g)
    (UnsafePoseObj ?o ?p)
    (ObjCFreePose ?o ?p ?o2 ?p2)
    (UnsafeTrajObj ?r ?t)
    (ObjCFreeTraj ?r ?t ?o ?p)

    ; robot configuration predicates
    (CanMove)
    (HandEmpty ?a)
    (AtConf ?a ?q)
    (AtPose ?o ?p)
    (AtGrasp ?a ?o ?g)

    ; wrench predicates
    (Wrench ?w)
    (IsStableGrasp ?o ?g ?w)
    (StableHolding ?o ?w)

    ; object predicates
    (Knife ?knife)
    (Cuttable ?o)
    (Pile ?l) ; todo -- piles are only pushable

    ; inheritance and object existance predicates
    (EarliestAncestor ?n ?o)
    (SlicedFrom ?o ?h)
    (DicedFrom ?o ?l)
    (InWorld ?o)
    (NeedSlice ?o)
    (Sliced ?o)
    (NeedDice ?o)
    (Diced ?o)

    ; slice kinematics predicates
    (ValidSliceEffect ?o ?p ?h1 ?h2 ?t)
    (SliceCutWrenches ?knife ?o ?w1 ?w2)
    (SliceCutKin ?a ?knife ?o ?g ?p0 ?w1 ?w2 ?q0 ?q1 ?t)

    ; dice kinematics predicates
    (ValidDiceEffect ?l ?t)
    (DiceCutWrench ?knife ?o ?w)
    (DiceCutKin ?a ?knife ?o ?g ?p0 ?w ?q0 ?q1 ?t)

    ; goal derived predicates
    (TwoSlicesInWorld ?o)
    (FourSlicesInWorld ?o)
    (DicePileInWorld ?o)

    ; todo -- (KnifePushKin ?a ?knife ?o ?g ?p1 ?p2 ?q1 ?q2 ?t)
  )

  (:action move_free
    :parameters (?a ?q1 ?q2 ?t)
    :precondition (and (Arm ?a) (HandEmpty ?a) (CanMove) ; disables moving twice in a row (b/c can smash both moves together -- optimization)
                       (Conf ?q1) (AtConf ?a ?q1)
                       (not (UnsafeTrajObj ?a ?t))
                       (FreeMotion ?a ?q1 ?t ?q2))
    :effect (and (AtConf ?a ?q2) 
                 (not (AtConf ?a ?q1)) 
                 (not (CanMove)))
  )
  (:action move_holding
    :parameters (?a ?q1 ?q2 ?o ?g ?t)
    :precondition (and (Arm ?a) (CanMove)
                       (Movable ?o)
                       (Conf ?q1) (AtConf ?a ?q1)
                       (Grasp ?a ?o ?g) (AtGrasp ?a ?o ?g)
                       (not (UnsafeTrajObj ?a ?t))
                       (HoldingMotion ?a ?q1 ?t ?q2 ?o ?g))
    :effect (and (AtConf ?a ?q2) 
                 (not (AtConf ?a ?q1)) 
                 (not (CanMove)))
  )
  (:action pick
    :parameters (?a ?o ?p ?g ?q ?t)
    :precondition (and (Arm ?a) (HandEmpty ?a)
                       (Movable ?o) (InWorld ?o)
                       (Conf ?q) (AtConf ?a ?q)
                       (Pose ?o ?p) (AtPose ?o ?p)
                       (Kin ?a ?o ?p ?g ?q ?t))
    :effect (and (AtGrasp ?a ?o ?g) 
                 (not (AtPose ?o ?p)) 
                 (not (HandEmpty ?a))
                 (CanMove))
  )
  (:action place
    :parameters (?a ?o ?p ?g ?q ?t)
    :precondition (and (Arm ?a)
                       (Movable ?o)
                       (Conf ?q) (AtConf ?a ?q)
                       (Grasp ?a ?o ?g) (AtGrasp ?a ?o ?g)
                       (not (UnsafePoseObj ?o ?p))
                       (Kin ?a ?o ?p ?g ?q ?t))
    :effect (and (not (AtGrasp ?a ?o ?g))
                 (AtPose ?o ?p)
                 (HandEmpty ?a)
                 (CanMove))
  )
  ;todo -- (:action push_with_knife
  ;  :parameters (?a ?knife ?o ?g ?p1 ?p2 ?q1 ?q2 ?t)
  ;  :precondition (and (Arm ?a)
  ;                     (Knife ?knife)
  ;                     (Cuttable ?o)
  ;                     (InWorld ?o)
  ;                     (Grasp ?a ?knife ?g) (AtGrasp ?a ?knife ?g)
  ;                     (Conf ?q1) (AtConf ?a ?q1)
  ;                     (Pose ?o ?p1) (AtPose ?o ?p1)
  ;                     (KnifePushKin ?a ?knife ?o ?g ?p1 ?p2 ?q1 ?q2 ?t))
  ;    :effect (and (CanMove)
  ;                 (not (AtConf ?a ?q1)) (AtConf ?a ?q2)
  ;                 (not (AtPose ?o ?p1)) (AtPose ?o ?p2))
  ;)
  (:action slice_move ; todo -- sanity check preconditions and effects
    :parameters (?a ?knife ?o ?g ?p ?w1 ?w2 ?q0 ?q1 ?t)
    :precondition (and (Arm ?a) 
                      (Knife ?knife) ; subtle mutex here of knife must be held --> cannot be cut i.e. knife always in world
                      (Cuttable ?o)
                      (InWorld ?o)
                      (Conf ?q0) (AtConf ?a ?q0)
                      (Grasp ?a ?knife ?g) (AtGrasp ?a ?knife ?g)
                      (StableHolding ?knife ?w1) (StableHolding ?knife ?w2)
                      (Pose ?o ?p) (AtPose ?o ?p)
                      (SliceCutWrenches ?knife ?o ?w1 ?w2)
                      (SliceCutKin ?a ?knife ?o ?g ?p ?w1 ?w2 ?q0 ?q1 ?t)
    )
    :effect (and (not (AtConf ?a ?q0)) 
                (AtConf ?a ?q1)
                 (NeedSlice ?o)
    )
  )
  (:action slice_object ; todo -- sanity check preconditions and effects
    :parameters (?o ?p ?h1 ?h2 ?p1 ?p2 ?t) ; t here isn't a robot movement
    :precondition (and (Cuttable ?o) (InWorld ?o) 
                       (Pose ?o ?p) (AtPose ?o ?p)
                       (NeedSlice ?o)
                       (SlicedFrom ?o ?h1)
                       (SlicedFrom ?o ?h2)
                       (ValidSliceEffect ?o ?p ?h1 ?h2 ?t)
                       (Pose ?h1 ?p1)
                       (Pose ?h2 ?p2)
    )
    :effect (and (Sliced ?o)
                 (CanMove)
                 (not (InWorld ?o))
                 (InWorld ?h1)
                 (InWorld ?h2) ; is this all the attributes a sliced object should have?
                 (AtPose ?h1 ?p1)
                 (AtPose ?h2 ?p2)
    )
  )
  (:action dice_move ; todo -- sanity check preconditions and effects
    :parameters (?a ?knife ?o ?g ?p ?w ?q0 ?q1 ?t)
    :precondition (and (Arm ?a) 
                      (Knife ?knife) 
                      (Cuttable ?o)
                      (InWorld ?o)
                      (Conf ?q0) (AtConf ?a ?q0)
                      (Grasp ?a ?knife ?g) (AtGrasp ?a ?knife ?g)
                      (StableHolding ?knife ?w)
                      (Pose ?o ?p) (AtPose ?o ?p)
                      (DiceCutWrench ?knife ?o ?w)
                      (DiceCutKin ?a ?knife ?o ?g ?p ?w ?q0 ?q1 ?t)
    )
    :effect (and (not (AtConf ?a ?q0)) 
                (AtConf ?a ?q1)
                 (NeedDice ?o)
    )
  )
  (:action dice_object ; todo -- sanity check preconditions and effects
    :parameters (?o ?p ?l ?t) ; t here isn't a robot movement
    :precondition (and (Cuttable ?o) (InWorld ?o) 
                       (Pose ?o ?p) (AtPose ?o ?p)
                       (NeedDice ?o)
                       (Pile ?l)
                       (DicedFrom ?o ?l)
                       (ValidDiceEffect ?l ?t)
                       )
    :effect (and (Diced ?o)
                 (CanMove)
                 (not (InWorld ?o))
                 (InWorld ?l)
           )
  )
  (:derived (On ?o ?r)
    (exists (?p) (and (Supported ?o ?p ?r) (AtPose ?o ?p)))
  )
  (:derived (Holding ?a ?o)
    (exists (?g) (and (Arm ?a) (Grasp ?a ?o ?g) (AtGrasp ?a ?o ?g)))
  )
  (:derived (StableHolding ?o ?w)
    (exists (?a ?g) (and (Arm ?a) (Grasp ?a ?o ?g) (AtGrasp ?a ?o ?g) (IsStableGrasp ?o ?g ?w)))
  )
  (:derived (UnsafePoseObj ?o ?p)
    (exists (?o2 ?p2) (and (InWorld ?o2) (Pose ?bo ?p2) (AtPose ?o2 ?p2) 
                           (not (ObjCFreePose ?o ?p ?o2 ?p2)))))
  (:derived (UnsafeTrajObj ?r ?t)
      (exists (?o ?p) (and (InWorld ?o) (Pose ?o ?p) (AtPose ?o ?p) 
                           (not (Holding ?r ?o))
                           (not (ObjCFreeTraj ?r ?t ?o ?p)))))
  (:derived (TwoSlicesInWorld ?o) ; todo -- sanity check preconditions and effects
      (exists (?h1 ?h2) (and (Sliced ?o) (EarliestAncestor ?o ?h1) (EarliestAncestor ?o ?h2) (InWorld ?h1) (InWorld ?h2))))
  (:derived (FourSlicesInWorld ?o) ; todo -- sanity check preconditions and effects -- are these ensured to be deduped?
      (exists (?h1 ?h2 ?h3 ?h4 ?intermediate) (and (Sliced ?o) (EarliestAncestor ?o ?h1) (EarliestAncestor ?o ?h2) (EarliestAncestor ?o ?h3) (EarliestAncestor ?o ?h4)
      (InWorld ?h1) (InWorld ?h2) (InWorld ?h3) (InWorld ?h4) (EarliestAncestor ?o ?intermediate) (Sliced ?intermediate) (SlicedFrom ?o ?intermediate)
      ))
  )
  (:derived (DicePileInWorld ?o) ; todo -- sanity check preconditions and effects
      (exists (?l) (and (Diced ?o) (DicedFrom ?o ?l) (Pile ?l) (InWorld ?l))))
)
